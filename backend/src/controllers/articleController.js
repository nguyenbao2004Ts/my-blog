const articleModel = require('../models/articleModel');
const fs = require('fs');
const path = require('path');
const multer = require('multer');

// C·∫•u h√¨nh Multer ƒë·ªÉ l∆∞u ·∫£nh v√†o public/images
const storage = multer.diskStorage({
    destination: "public/images",
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage }).single("image");

class articleController {
    // L·∫•y t·∫•t c·∫£ b√†i vi·∫øt
    async getAllArticle(req, res) {
        try {
            const articles = await articleModel.find({});
            res.json(articles);
        } catch (err) {
            res.status(500).json({ error: err.message });
        }
    }

    // L·∫•y b√†i vi·∫øt theo ID
    async getArticleById(req, res) {
        try {
            const article = await articleModel.findById(req.params.id);
            if (!article) {
                return res.status(404).json({ message: "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i" });
            }
            res.json(article);
        } catch (error) {
            res.status(500).json({ message: "L·ªói khi l·∫•y b√†i vi·∫øt", error });
        }
    }

    // T·∫°o b√†i vi·∫øt m·ªõi
    async createArticle(req, res) {
        upload(req, res, async (err) => {
            if (err) return res.status(500).json({ error: "L·ªói t·∫£i ·∫£nh l√™n" });
            try {
                const { title, shortDescription, content, tag } = req.body;
                if (!title || !shortDescription || !content || !req.file || !tag) {
                    return res.status(400).json({ error: "Thi·∫øu th√¥ng tin b√†i vi·∫øt!" });
                }
                const newArticle = new articleModel({
                    title,
                    shortDescription,
                    content,
                    image: `/images/${req.file.filename}`,
                    tag: JSON.parse(tag),
                    time: new Date()
                });
                await newArticle.save();
                res.json({ message: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c t·∫°o!", newArticle });
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });
    }

    async updateArticleById(req, res) {
        upload(req, res, async (err) => {
            if (err) return res.status(500).json({ error: "L·ªói t·∫£i ·∫£nh l√™n" });
    
            try {
                console.log("üîç ID b√†i vi·∫øt c·∫ßn c·∫≠p nh·∫≠t:", req.params.id);
                console.log("üì• D·ªØ li·ªáu g·ª≠i l√™n:", req.body);
    
                const article = await articleModel.findById(req.params.id);
                if (!article) {
                    return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });
                }
    
                // D·ªØ li·ªáu c·∫≠p nh·∫≠t
                const updateData = {
                    title: req.body.title || article.title,
                    shortDescription: req.body.shortDescription || article.shortDescription,
                    content: req.body.content || article.content,
                    tag: req.body.tag ? JSON.parse(req.body.tag) : article.tag,
                    time: new Date()
                };
    
                // N·∫øu c√≥ ·∫£nh m·ªõi, x√≥a ·∫£nh c≈© v√† c·∫≠p nh·∫≠t ·∫£nh m·ªõi
                if (req.file) {
                    console.log("üñº C·∫≠p nh·∫≠t ·∫£nh m·ªõi:", req.file.filename);
                    const oldImagePath = path.join(__dirname, "../../public", article.image);
                    if (fs.existsSync(oldImagePath)) {
                        fs.unlinkSync(oldImagePath);
                    }
                    updateData.image = `/images/${req.file.filename}`;
                } else {
                    console.log("üìå Kh√¥ng c√≥ ·∫£nh m·ªõi, gi·ªØ ·∫£nh c≈©.");
                    updateData.image = article.image;
                }
    
                // C·∫≠p nh·∫≠t b√†i vi·∫øt
                const updatedArticle = await articleModel.findByIdAndUpdate(
                    req.params.id,
                    { $set: updateData },
                    { new: true }
                );
    
                console.log("‚úÖ B√†i vi·∫øt ƒë√£ c·∫≠p nh·∫≠t:", updatedArticle);
                res.json({ message: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", updatedArticle });
            } catch (err) {
                console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:", err.message);
                res.status(500).json({ message: "L·ªói kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c b√†i vi·∫øt", error: err.message });
            }
        });
    }
        
    

    // X√≥a b√†i vi·∫øt theo ID
    async deleteArticleById(req, res) {
        try {
            const article = await articleModel.findById(req.params.id);
            if (!article) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

            const imagePath = path.join(__dirname, "../../public", article.image);
            if (fs.existsSync(imagePath)) fs.unlinkSync(imagePath);

            await articleModel.findByIdAndDelete(req.params.id);
            res.json({ message: "B√†i vi·∫øt ƒë√£ x√≥a" });
        } catch (err) {
            res.status(500).json({ message: "L·ªói kh√¥ng x√≥a ƒë∆∞·ª£c b√†i vi·∫øt" });
        }
    }
}

module.exports = new articleController();
